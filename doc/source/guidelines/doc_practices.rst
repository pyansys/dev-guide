Documentation Practices
=======================

PyAnsys documentation must not only be written but also maintained. If you are
new to writing developer documentation, see the `Google Developer Documentation
Style Guide <https://developers.google.com/style>`_. It provides
editorial guidelines for writing clear and consistent developer documentation,
allowing this guide to supply guidance specific to PyAnsys library
documentation.

When writing developer documentation, the relationship between code and
documentation is key. To keep documentation up to date with radial evolving
code:

- Minimize the content footprint
- Write `timeless documentation <https://developers.google.com/style/timeless-documentation>`_
- Support contributions from both inside and outside of the development team
- Perform periodic reviews

Understanding Documentation Sources
------------------------------------
The generation of PyAnsys documentation uses `Sphinx`_ and an Ansys-branded
theme (`pyansys-sphinx-theme`_) to assemble content in:

- Docstrings
- reStructuredText (RST) files
- Python (PY) example files

Docstrings
~~~~~~~~~~
Docstrings must be formatted so that Sphinx can parse them. You can use either
of these Sphinx extensions:
 
 - `numpydoc`_
 - `napoleon`_

The ``numpydoc`` extension is generally preferred because it supports an API
documentation structure with one page per method, providing Python community
members with documentation like that generated by `pandas`_
and `NumPy`_. If, however, your API is very linear, you
might prefer the  ``napoleon`` extension because it supports a documentation
structure where everything needed to solve a certain problem can be shown on one page.

The ``numpydoc`` extension provides its own `style guide
<https://numpydoc.readthedocs.io/en/latest/format.html>`_ and a `user guide
<https://numpydoc.readthedocs.io/en/latest/>`_ that explains how to use the
extension with Sphinx. The ``napoleon`` extension, which parses both numpy and
Google style docstrings, refers you to the `Google Python Style Guide`_


Regardless of the extension that you choose for generating documentation, we
recommend the use of numpy-style docstrings so that there is consistency
across PyAnsys libraries. For more information, see :ref:`API Documentation Style`.

RST Files
~~~~~~~~~
To provide general usage information in your documentation, use your favorite
editor to create RST files that you then place in the repository's ``doc``
directory. The ``index.rst`` file in the ``doc\source`` directory defines the
first level of your documentation hierarchy.  The ``toctree`` directive
indicates the maximum number of heading levels that the documentation is to
display. Below this directive are the directory names for your documentation
sections.  Each documentation section has its own ``index.rst`` file.

For example, if you open the ``index.rst`` file in the ``doc\source`` directory
in the ``dev-guide`` repository, you will see that the ``toctree`` direction
indicates that the *PyAnsys Developer's Guide* is to display a maximum of three
heading levels. You then see the section structure for this guide:

.. code::

   overview/index
   guidelines/index
   library_description/index
   coding_style/index
   documentation_style/index

While you do not include the ``.rst`` extension when defining the section
structure, the index file referenced for each section must be named
``index.rst``. If you open ``index.rst`` in ``doc\source\overview``, you can
see that it describes how the PyAnsys project provides Python libraries that
expose Ansys technologies to the Python ecosystem.

After you build documentation locally as described in :ref:`doc_building`, the
first-level heading in the ``index.rst`` file for each documentation section is
shown as clickable link in the header of the documentation's generated HTML
output. For more information on defining a documentation structure, see the
`Sphinx Getting Started
<https://www.sphinx-doc.org/en/master/usage/quickstart.html>`_ guide.

Within RST files, heading titles are followed by a line having a string of
characters that is the same length as the heading title. If the length of the
characters under the heading title do not match the length of the heading
title, Sphinx generates a warning.

For consistency within PyAnsys libraries, the use of these special characters
is recommended for headings but are not enforced:

- For first-level headings, use ====.
- For second-level headings, use ---.
- For third-level headings, use ~~~. 

For comprehensive syntax information, see the `reStrucutredText Markup Specification
<https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html>`_.

Because you need to be familiar with the content in the *PyAnsys Developer's
Guide*, page through its HTML pages and then explore the RST files in its
repository. This will help you to understand the syntax and see how RST files
have been nested to create this guide.

Examples
~~~~~~~~
Examples come in two formats:

- Basic code snippets demonstrating some functionality
- Full-fledged standalone examples that are meant to be run as individual downloadable scripts

Basic code snippets should be placed in the ``doc/source``
directory. Full-fledged standalone examples must be placed in the ``examples``
directory at the root of the repository. All of these examples, which should be
PEP 8-compliant, are compiled dynamically during the build process. Always
ensure that your examples run properly locally because they will be verified
through the CI performed via GitHub Actions.

Adding a new standalone example consists of placing it in an applicable
subdirectory in the ``examples`` directory. If none of the existing directories
match the category of your example, create a new subdirectory with a
``README.txt`` file describing the new category. Because these examples are
built using the `Sphinx-Gallery`_ extension, you must follow its `coding
guidelines <https://sphinx-gallery.github.io/stable/index.html>`_.

PyMAPDL provides a self-demonstrating example of how to `add an example reference key <https://mapdldocs.pyansys.com/examples/03-tips-n-tricks/00-example-template.html#ref-how-to-add-an-example-reference-key>`_. 


URL of the documentation page
-----------------------------
To host the documentation related to a PyAnsys project, an easy way to go is to use GitHub Page.
This GitHub feature do not require any database to be setup nor to configure any server.
GitHub will serve the documentation related to the project from a URL tied to PyAnsys organization.

The standard name for this URL can be such as:
   ``<product_name>.docs.pyansys.com``

For instance: `grantami <https://grantami.docs.pyansys.com>`_

Regarding the documentation dedicated to a specific feature of the product or an example, the URL is formatted like this:
   ``<extra>.<product_name>.docs.pyansys.com``

For instance: `cartpole <https://pyansys.github.io/ml-rl-cartpole/>`_

Once the URL name has been decided, it must be specified in the "Settings -> Pages -> Custom domain" section of the repository.

Then, the URL has to be registered using Microsoft Azure to set the DNS properly and link it to the ANSYS organization.
This action will be performed by one of the Ansys administrator of Microsoft Azure account.

Accessing a Library's Documentation
-----------------------------------
Documentation for the latest stable release of a PyAnsys library is accessible
from its repository. You can generally access the latest development version of the
documentation tracking the ``main`` branch by adding the prefix ``dev.`` to
the URL for the latest stable release.

For example, consider PyAEDT documentation:

- The URL for documentation of the latest stable release is `<https://aedtdocs.pyansys.com/>`_.
- The URL for documentation of the latest development version is `<https://dev.aedtdocs.pyansys.com/>`_.

The latest development versions of both the library and its documentation are automatically kept
up-to-date via GitHub actions.

To make documentation changes, you create a branch with a name that begins with a prefix of
``doc/`` that is then followed by a short description of what you are changing. For more
information, see :ref:`Branch Naming Conventions`.

As you are making changes in this branch, you want to periodically generate the documentation
locally so that you can test your changes before you create a GitHub pull request. For more
information, see :ref:`doc_building`. It is also possible for you to build a PDF
of your documentation locally on Windows as described in :ref:`pdf_building`.

.. _cloning:

Cloning a GitHub Repository
---------------------------
Contributing to a GitHub repository requires that you first clone the repository. While developers
likely know many ways to do this, technical documentation specialists may need to review the
following instructions for using either Windows PowerShell or Git Bash to clone a GitHub repository.

Using Windows PowerShell to Clone a GitHub Repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To use Windows PowerShell to clone a GitHub repository:

#. In Windows PowerShell, navigate to the directory on your machine where you want
   to clone GitHub repositories.

#. Go to the `PyAnsys GitHub Organization`_ and select the
   repository that you want to clone.

   Because the list of repositories is quite long, you can use the ``Find
   a repository`` option to search for the repository that you want to clone. For
   example, you can search for "theme" to find the ``pyansys-sphinx-theme`` repository.  

#. In the upper right corner of the repository, click the green ``Code`` button to
   drop down a list of options.

#. To the right of the ``HTTPS`` option, click the clipboard icon to copy the path to
   the repository.
 
#. Go back to Windows PowerShell and type ``git clone`` and then click the right
   mouse button to paste the copied path.

#. Press ``Enter`` to copy the files in the repository to your local directory.

#. Type ``ls`` to see a list of the files now in your local directory. 

.. note::
   In PowerShell, typing ``dir`` is the equivalent to typing ``ls``.

Using Git Bash to Clone a GitHub Repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To use Git Bash to clone a GitHub repository:

#. In the directory where you want to clone PyAnsys repositories, right-click and
   select ``Git Bash Here``.

#. Type ``git clone`` followed by the address of the repo to clone.


For example, you clone the ``pyansys-sphinx-theme`` repository with:
  
.. code::
  
  git clone https://github.com/pyansys/pyansys-sphinx-theme

.. _push_changes:

Pushing Changes to the GitHub Repository
----------------------------------------
As you make changes in your ``doc/`` branch, you want to periodically test then in
local documentation builds as described in :ref:`doc_building`. After you resolve
any issues and are satisfied with what appears in a local build, you are ready
to push your changes to the library's GitHub repository. To accomplish this,
you can use either Git commands or Git Extensions. 

Using Git Commands to Push Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To use Git commands to push your changes to the GitHub repository:

#. In Windows Command Prompt, navigate to the directory where you cloned 
   the GitHub repository.

#. Type ``git status`` to see a summary of the changes that you have made in this
   directory.

#. Create a branch by entering ``git checkout -b`` followed by the name to give
   this branch.
   
   The option ``-b`` is for adding a branch. If you were adding a branch with documentation
   changes to the ``Contributing`` topic, you might enter:
   
   .. code::

    git checkout -b doc/edit_contributing

#. Enter ``git add .`` to stage the changed files to commit.

#. Enter ``git status`` again to see all files that are staged for committing in green.

#. If any unnecessary files are staged, delete them in File Explorer and then enter ``git status`` 
   again to ensure that the final red line indicates that these files have been deleted.

#. If you make any additional file changes, type ``git add .`` again to restage the files to
   commit.

#. When finished, commit your changes to GitHub history by entering ``git commit -m`` followed by
   a description in quotation marks.
   
   For the given example, you might enter:
   
   .. code::

    git commit -m "Edit Contributing topic" 
   
   The number of files changed are shown, followed by the number of insertions and deletions.
   A create mode or rename doc action is then shown for each file.

#. For the first push of a newly created branch, enter ``git push --set-upstream origin``,
   followed by the branch name.
   
   For the given example, you would enter:
      
   .. code::
   
    git push --set-upstream origin doc/edit_contributing

   .. note::
      For any subsequent push, you would simply use ``git push``.
   
#. Create the PR as described in :ref:`create_pr`.

Using Git Extensions to Push Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To use Git Extensions to push your changes to the GitHub repository:

#. In Git Extensions, select ``Commands > Create branch`` and then provide a name for
   the branch that you want to create, using the prefix ``doc/`` followed by a short
   description of what you intend to change.
   
#. Make your documentation changes in the directory where you cloned the library's
   GitHub repository.   

#. Test your changes in local documentation builds. For more information, see
   :ref:`doc_building`.

#. In Git Extensions, click ``Commit`` to see the files that have been changed in your
   local directory.
   
#. In the window that opens, stage the files to commit, add a commit message, and then
   click ``Commit``.

#. Do a pull from the GitHub repository to your local directory to ensure that there
   are no conflicts with what is in your branch. If there are conflicts, resolve
   them.

#. Do a push of your branch to the GitHub repository.

#. Create the PR as described in :ref:`create_pr`.


.. _create_pr:

Creating the GitHub PR
----------------------
Regardless of what method you used to push your changes, do the following to create
the GitHub PR:

#. Go to the GitHub repository, where you will see an entry for your pushed branch.

#. If the pushed branch resolves an issue, in its description, type ``Resolves #``
   and select from the list of issues that appears.

#. Create either a PR or draft PR, making the title a simple statement because
   our `automatic release generator <https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes>`_
   uses this PR title in the automatic rendering of release notes.

   If your PR is ready for review, select ``Create pull request``. Otherwise,
   select ``Create draft pull request`` and mark it as ready for review once
   it includes all of your changes and you are satisfied with it. 

   If you need to change a PR title, to its right, click the ``Edit`` button,
   which becomes a ``Save`` button while you are in editing mode.

.. _doc_building:

Building Documentation Locally
------------------------------
You can build and verify the HTML documentation for a PyAnsys library locally
by installing Sphinx and other documentation build dependencies.

Setting Up Your Machine
~~~~~~~~~~~~~~~~~~~~~~~
Anaconda provides Python and tools, such as a Python IDE (Interactive Development Environment),
a Python command line editor, and Sphinx dependencies. This gives you what you need to get up
and running.

#. Install the `Anaconda Individual Edition`_.

#. If a PyAnsys library already exists, create a directory in which to place a clone of its GitHub repository.

#. Clone the PyAnsys library's GitHub repository. For more information, see :ref:`Cloning`.

#. If you have not yet cloned the `pyansys-sphinx-theme`_ repository, clone it.

Installing Build Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
You can build documentation for the `Developer's Guide` and
`pyansys-sphinx-theme`_ repositories without installing a PyAnsys library in
development mode. However, for many other PyAnsys libraries, when you push
changes that you have made in a local branch to the library's GitHub repository,
CI checks typically require that the full library is installed.

#. In Anaconda PowerShell, navigate to the base directory in the library's cloned repository.

#. If your library must be installed in development mode, enter:
   
   .. code::

    pip install -e .

#. To install the build requirements for generating documentation, enter:
   
   .. code::

    pip install -r requirements_docs.txt


.. note::
   If you want to configure and activate a Python virtual environment with the
   required packages, you can use ``configure_venv``.

Once build requirements are installed, you can build HTML documentation.

Building HTML Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
How you build HTML documentation depends on your operating system.

#. If you are running on Linux or Mac, enter:
   
   .. code::

    make -C doc html


#. If you are running on Windows, enter two commands:
   
   .. code::
  
    cd doc
    .\make.bat html


   As Sphinx generates HTML output in the library's ``../doc/_build/html`` directory,
   Anaconda PowerShell displays any errors and warnings for unexpected indentations,
   bad target locations for links, missing files, and extra files included in the
   repository but not referenced by any ``index.rst`` file.
   
#. Resolve all indicated issues before submitting a pull request (PR) to push
   your changes to the library's GitHub repository. 
   
#. After local documentation builds successfully, navigate to ``doc/_build/html/``
   and use your browser to open the ``index.html`` file to review the documentation,
   repeating the local build process until there are no errors or obvious issues.

.. note::
   You can use ``.\make.bat`` to build more than HTML output. To view a summary of
   all target options, enter ``.\make.bat``.

Your next step is to push your changes to the library's GitHub repository
by creating a PR. For more information, see :ref:`create_pr`.

.. _pdf_building:

Building a PDF of Your Documentation Locally
--------------------------------------------
Some libraries supply a link to a PDF of the documentation under 'Assets' in the 
release notes for a version. On Linux, building this PDF can be done by following
`these directions <https://sudonull.com/post/70830-How-to-make-LaTeX-and-PDF-generation-in-Sphinx>`_.
On Windows, building a PDF is a manual process that you run locally:

#. Install `MiKTeX`_  for Windows, selecting the
   recommended option for installing it for only your own use.

#. From the Windows Start menu, start the MiKTeX Console.

#. On the Welcome page, click ``Check for updates`` and install any available
   updates.

#. Install the latest version of Strawberry Perl, which enables you to build
   LaTeX files, accepting the default installation location (``C:\Strawberry\``).

#. In the Command Prompt window, type ``perl-v`` to test that your installation is
   successful.

#. Ensure that these Perl directory locations have been added to your ``Path``
   system environment variable:
   
   - C:/Strawberry/c/bin
   - C:/Strawberry/perl/site/bin
   - C:/Strawberry/perl/bin


#. In Anaconda PowerShell, navigate to the ``doc`` directory with:
   
   .. code::

    cd C:\AnsysDev\GitRepos\PyAnsys\dev-guide\doc


#. Generate LaTeX files and a PDF from these files in ``..\doc\build\latex``
   with:

   .. code::

    .\make latexpdf


.. note::
   For the Table of Contents in the PDF file to generate correctly, ``index.rst`` files
   must not include child sections.


Continuous Documentation Deployment
-----------------------------------
PyAnsys libraries deploy their documentation online via `GitHub Actions`_ to
`GitHub Pages`_. For example, this documentation is hosted on the ``gh-pages``
branch within this repository. This is done by uploading the generated
documentation within the ``doc/_build/html/`` directory directly to the
``gh-pages`` branch and then `enabling GitHub pages`_.

Building Your Documentation within GitHub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While you could manually upload your auto-generated documentation for each
release using your own local GitHub credentials, the best practice is to have
your documentation build on GitHub and deployed either on release or push to
main. You can do this via `GitHub Actions`_ by creating a new workflow that
generates your documentation on each pull request and then deploys under
certain conditions.

**Documentation Workflow**

Your documentation workflow should be within the ``.github/workflows``
directory and should be triggered on each PR. It should use one of the
following approaches:

.. tabs::

   .. tab:: Using ``tox``

      The best way to get started with this is to use the `ansys-templates`_ tool and run::

        ansys-templates new pyansys-advanced

      This will generate a new GitHub workflow file containing the following section::

         docs:
           name: Documentation
           runs-on: ubuntu-latest
           steps:
             - uses: actions/checkout@v2
             - name: Set up Python
               uses: actions/setup-python@v2
               with:
                 python-version: 3.7
             - name: Install dependencies
               run: |
                 python -m pip install --upgrade pip flit tox
             - name: Generate the documentation with tox
               run: tox -e doc

   .. tab:: Without Using ``tox``

         While `tox`_ is the preferred tool for automating your documentation build, if
         you wish to avoid using `tox`_, consider the following workflow::

           docs:
             name: Build Documentation
             runs-on: ubuntu-latest
             steps:
               - uses: actions/checkout@v2
               - name: Setup Python
                 uses: actions/setup-python@v2
                 with:
                   python-version: 3.8

               - name: Install <PROJECT-NAME>
                 run: pip install -e .

               - name: Install documentation build requirements
                 run: pip install -r requirements/requirements_docs.txt

               - name: Build Documentation
                 run: |
                   make -C doc html SPHINXOPTS="-j auto -W --keep-going"
                   touch doc/_build/html/.nojekyll
                   <product>.docs.pyansys.com > doc/_build/html/CNAME


Your next step will be to upload the documentation artifact. Assuming your
documentation is written to ``doc/_build/html``, upload your documentation
with::

   - name: Upload HTML Documentation
     uses: actions/upload-artifact@v2
     with:
       name: HTML-Documentation
       path: doc/_build/html/
       retention-days: 7

This will allow anyone creating pull requests to download documentation build
artifacts as a convenient zip and to open the documentation by opening
``index.html``.

Next, deploy your documentation to the ``gh-pages`` branch via using the
``JamesIves/github-pages-deploy-action`` action::

   - name: Deploy
     if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
     uses: JamesIves/github-pages-deploy-action@4.3.0
     with:
       branch: gh-pages
       folder: doc/build/html
       clean: true

.. note::

   Depending on your preferences, you may choose to update the documentation on
   tags only (as done above), or on each each push. If you wish to have your
   documentation deployed on each push to ``main``, change the conditional
   above to::

      if: github.ref == 'refs/heads/main'

Enabling GitHub Pages
~~~~~~~~~~~~~~~~~~~~~
After deploying to the ``gh-pages`` branch, GitHub will normally automatically
enable GitHub pages and host your documentation to the specified ``CNAME`` as
specified in the build documentation step. If this is not automatically enabled,
follow the directions at `enabling GitHub pages`_.

Your final step is to add a ``CNAME`` to `PyAnsys DNS Zones`_. Contact `Maxime
Rey`_ or `Roberto Pastor Muela`_ to have them add this.

.. note::
   If the repository visibility is set to ``private`` or ``internal``, the
   created GitHub Pages will also be private or internal. In this way you can
   test out the look and feel of your documentation without exposing it to the
   public (if ever intended).


Additional Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~

**Dedicated Documentation Repository**

The easiest approach is to deploy your documentation to ``gh-pages`` directly
on the repository generating the documentation as this does not require any
additional authorization, but there are some cases in which you may consider
deploying to a dedicated documentation repository for the following reasons:

- Size of the generated documentation makes ``git pull`` or ``git clone`` slow.
- Separation of concerns.
- Preference to isolate source and documentation.

For example, the `PyMAPDL Documentation`_ is hosted at the
`pyansys/pymapdl-docs`_ repository due to the size of the generated documentation.

**Additional Tokens**

To support pushing to a different repository, the GitHub workflow needs an
additional token. This can be done with either a dedicated PAT given by a
service account, or via a service bot. The PyAnsys organization uses the
`PyAnsys Bot`_ to localize permissions to within GitHub workflows and limit the
scope of the GitHub Actions to only users part of the `PyAnsys Organization`_.
To use this in your workflow for repositories within `PyAnsys Organization`_, use::

  - name: Get Bot Application Token
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    id: get_workflow_token
    uses: peter-murray/workflow-application-token-action@v1
    with:
      application_id: ${{ secrets.BOT_APPLICATION_ID }}
      application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

This creates a new token ``steps.get_workflow_token.outputs.token``, which can
only be used within this GitHub action run. Use this token by modifying your
deployment step to use this token and deploy to a different ``repository-name``::

   - name: Deploy
     if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
     uses: JamesIves/github-pages-deploy-action@4.3.0
     with:
       repository-name: pyansys/<project>-docs
       branch: gh-pages
       token: ${{ steps.get_workflow_token.outputs.token }}
       folder: doc/build/html
       clean: true

.. note::
   By default, the `PyAnsys Bot`_ does not have permission to be used within
   repositories. Contact PyAnsys administrators `Maxime Rey`_ or `Alex
   Kaszynski`_ to permit the `PyAnsys Bot`_ to access your repositories.


Creating PDFs
~~~~~~~~~~~~~
If you wish to generate PDF documentation of your project, you can add in the
following steps within your documentation workflow::

   - name: Install OS packages
     run: |
       sudo apt update
       sudo apt install texlive-latex-extra latexmk

   - name: Build PDF Documentation
     working-directory: doc
     run: make pdf

   - name: Upload PDF Documentation
     uses: actions/upload-artifact@v2
     with:
       name: PDF-Documentation
       path: doc/_build/latex/*.pdf
       retention-days: 7

If you use a release step, you can use this PDF artifact and upload it to your
GitHub release with::

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [docs, build_test]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.pdf

.. Links and References
.. include:: ../links.rst
